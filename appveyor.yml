
# vim ft=yaml
# CI on Windows via appveyor
# Largely from:
# https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
#
# Builds version specified in BUILD_COMMIT variable
# To chose version to build, edit value of BUILD_COMMIT

image: Visual Studio 2015

environment:
    matrix:
    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x" # currently 3.6.0
      PYTHON_ARCH: "64"
      # conda is only used for downloading C/C++ packages
      CONDA_INSTALL_LOCN: C:\\Miniconda36-x64
      PIP_DEPS: "cython numpy"

    - PYTHON: "C:\\Python37-x64"
      PYTHON_VERSION: "3.7.x" # currently 3.6.0
      PYTHON_ARCH: "64"
      # conda is only used for downloading C/C++ packages
      CONDA_INSTALL_LOCN: C:\\Miniconda36-x64
      PIP_DEPS: "cython numpy"

    - PYTHON: "C:\\Python38-x64"
      PYTHON_VERSION: "3.8.x" # currently 3.6.0
      PYTHON_ARCH: "64"
      # conda is only used for downloading C/C++ packages
      CONDA_INSTALL_LOCN: C:\\Miniconda36-x64
      PIP_DEPS: "cython numpy"

    - PYTHON: "C:\\Python39-x64"
      PYTHON_VERSION: "3.9.x" # currently 3.9.0
      PYTHON_ARCH: "64"
      # conda is only used for downloading C/C++ packages
      CONDA_INSTALL_LOCN: C:\\Miniconda36-x64
      PIP_DEPS: "cython"


install:
  - cmd: echo "Using cmd"

  # Getting build commit from the tag
  - if [%APPVEYOR_REPO_TAG%] == [true] set BUILD_COMMIT=%APPVEYOR_REPO_TAG_NAME%

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%

  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"

  - python -m pip install --upgrade pip
  - pip install wheel
  - git submodule update --init
  - pip install %PIP_DEPS%
  - pip install git+https://github.com/isuruf/delocate.git@separator

  - call install_cpp_deps_using_conda.cmd
  - echo %PATH%

build_script:
  # Build the wheel
  - cd symengine
  - git fetch origin
  - if [%APPVEYOR_REPO_TAG%] == [true] git checkout %BUILD_COMMIT%
  - python setup.py bdist_wheel build_ext --symengine-dir=%CONDA_INSTALL_LOCN%\envs\symengine\Library\

  # Fix the wheel
  - set dep_dir=%CONDA_INSTALL_LOCN%\envs\symengine\Library\bin
  - python ..\fix_windows_wheel.py %dep_dir%\mpir.dll %dep_dir%\mpfr.dll %dep_dir%\mpc.dll %dep_dir%\symengine-0.6.dll
  # Install the wheel
  - cd dist
  - pip install --pre --no-index -f . symengine
  - cd ..

test_script:
  # Run some tests
  - mkdir empty
  - cd empty
  - pip install sympy pytest
  - python -c "import symengine; symengine.test()"
  - cd ..\..


artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: symengine\dist\*
    name: wheels

deploy:
  description: 'Release to upload the built wheels'
  provider: GitHub
  auth_token:
    secure: kDd1fqXqnsBXe0JEowZH0td99P+R9j0OQwv2lDrol5R3P5+vHpWBkYEo8tVap7LH
  artifact: wheels
  draft: false
  prerelease: false
  on:
    appveyor_repo_tag: true

on_finish:
  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
